// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TranspotationTicketBooking.Models;

namespace TranspotationTicketBooking.Migrations
{
    [DbContext(typeof(TicketBookingDBContext))]
    [Migration("20210318045002_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "1d515c75-ea84-402c-9f99-d69a10fa6e18",
                            ConcurrencyStamp = "6c4fb945-2b25-49d4-9d58-87482fc544bc",
                            Name = "Passenger",
                            NormalizedName = "PASSENGER"
                        },
                        new
                        {
                            Id = "35b7a21a-e9bb-4c4b-9e15-1a4efaa7a5f6",
                            ConcurrencyStamp = "bc320a50-c09b-400c-904d-71e95c06576e",
                            Name = "BusController",
                            NormalizedName = "BUSCONTROLLER"
                        },
                        new
                        {
                            Id = "99266620-5f56-4654-bf3b-a17aff424bc3",
                            ConcurrencyStamp = "fb6ba838-5546-4617-94db-9d6581ef1753",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.BusInfo", b =>
                {
                    b.Property<string>("BusNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CondNo")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverNo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxSeats")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Verified")
                        .HasColumnType("int");

                    b.HasKey("BusNo");

                    b.HasIndex("UserId");

                    b.ToTable("BusInfo");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.Passenger", b =>
                {
                    b.Property<long>("PId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tp")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Verified")
                        .HasColumnType("int");

                    b.HasKey("PId");

                    b.HasIndex("UserId");

                    b.ToTable("Passenger");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.Route", b =>
                {
                    b.Property<long>("RId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("Distance")
                        .HasColumnType("bigint");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("RNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartHolt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StartHoltId")
                        .HasColumnType("bigint");

                    b.Property<string>("StopHolt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StopHoltId")
                        .HasColumnType("bigint");

                    b.HasKey("RId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.RouteInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("Distance")
                        .HasColumnType("bigint");

                    b.Property<long>("HoltId")
                        .HasColumnType("bigint");

                    b.Property<string>("HoltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<long>("RId")
                        .HasColumnType("bigint");

                    b.Property<float>("Time")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("RouteInfo");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.Session", b =>
                {
                    b.Property<long>("SId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("BusNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("RId")
                        .HasColumnType("bigint");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.Ticket", b =>
                {
                    b.Property<long>("TId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromHalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfSeats")
                        .HasColumnType("int");

                    b.Property<long>("PId")
                        .HasColumnType("bigint");

                    b.Property<int>("PStatus")
                        .HasColumnType("int");

                    b.Property<long>("SId")
                        .HasColumnType("bigint");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToHalt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BusNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.BusInfo", b =>
                {
                    b.HasOne("TranspotationTicketBooking.Models.User", null)
                        .WithMany("BusInfos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.Passenger", b =>
                {
                    b.HasOne("TranspotationTicketBooking.Models.User", null)
                        .WithMany("Passengers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TranspotationTicketBooking.Models.User", b =>
                {
                    b.Navigation("BusInfos");

                    b.Navigation("Passengers");
                });
#pragma warning restore 612, 618
        }
    }
}
